#!/usr/bin/env python3
import os, base64, hashlib, pathlib
from bs4 import BeautifulSoup  # pip install beautifulsoup4

SITE = pathlib.Path("site")
NGINX_CONF = SITE / ".nginx-csp.conf"
APACHE_HTA = SITE / ".htaccess"
CSP_ENV = os.getenv("CSP_ENV", "production").lower()

script_hashes, style_hashes = set(), set()

for htmlp in SITE.rglob("*.html"):
    soup = BeautifulSoup(htmlp.read_text(encoding="utf-8", errors="ignore"), "html.parser")
    for tag in soup.find_all("script"):
        if tag.has_attr("src"): continue
        content = (tag.string or "").encode("utf-8")
        if not content.strip(): continue
        h = base64.b64encode(hashlib.sha256(content).digest()).decode()
        script_hashes.add(f"'sha256-{h}'")
    for tag in soup.find_all("style"):
        content = (tag.string or "").encode("utf-8")
        if not content.strip(): continue
        h = base64.b64encode(hashlib.sha256(content).digest()).decode()
        style_hashes.add(f"'sha256-{h}'")

STYLE = " ".join(sorted(style_hashes))
SCRIPT = " ".join(sorted(script_hashes))

if CSP_ENV == "preview":
    csp = (
        "default-src 'self'; base-uri 'self'; object-src 'none'; frame-ancestors 'self'; "
        "img-src 'self' data: https:; font-src 'self' data:; "
        f"style-src 'self' {STYLE}; "
        f"script-src 'self' 'unsafe-eval' {SCRIPT}; "
        "connect-src 'self' ws: wss: http://127.0.0.1:* http://localhost:*; "
        "form-action 'self'"
    )
else:
    csp = (
        "default-src 'self'; base-uri 'self'; object-src 'none'; frame-ancestors 'none'; "
        "img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; "
        f"style-src 'self' https://fonts.googleapis.com {STYLE}; "
        f"script-src 'self' {SCRIPT}; "
        "connect-src 'self' ws: wss:; form-action 'self'"
    )

NGINX_CONF.write_text(
    "# autogenerated\n"
    f"add_header X-Robots-Tag \"noai, notrain\" always;\n"
    f"add_header TDM-Reservation \"1\" always;\n"
    f"add_header Content-Security-Policy \"{csp}\" always;\n"
    "add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n"
    "add_header Permissions-Policy \"geolocation=(), microphone=(), camera=(), fullscreen=(self), browsing-topics=()\" always;\n"
    "add_header X-Content-Type-Options \"nosniff\" always;\n"
    "add_header X-Frame-Options \"DENY\" always;\n"
    "add_header Cross-Origin-Opener-Policy \"same-origin\" always;\n"
    "add_header Cross-Origin-Embedder-Policy \"require-corp\" always;\n"
    "add_header Cross-Origin-Resource-Policy \"same-origin\" always;\n",
    encoding="utf-8",
)
APACHE_HTA.write_text(
    "# autogenerated\n"
    "<IfModule mod_headers.c>\n"
    '  Header always set X-Robots-Tag "noai, notrain"\n'
    '  Header always set TDM-Reservation "1"\n'
    f'  Header always set Content-Security-Policy "{csp}"\n'
    '  Header always set Referrer-Policy "strict-origin-when-cross-origin"\n'
    '  Header always set Permissions-Policy "geolocation=(), microphone=(), camera=(), fullscreen=(self), browsing-topics=()"\n'
    '  Header always set X-Content-Type-Options "nosniff"\n'
    '  Header always set X-Frame-Options "DENY"\n'
    '  Header always set Cross-Origin-Opener-Policy "same-origin"\n'
    '  Header always set Cross-Origin-Embedder-Policy "require-corp"\n'
    '  Header always set Cross-Origin-Resource-Policy "same-origin"\n'
    "</IfModule>\n",
    encoding="utf-8",
)
