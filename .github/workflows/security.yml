name: Security Scan

on:
  schedule:
    - cron: "0 4 * * 1" # weekly
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  CI: true
  NODE_ENV: production
  TAG_PREFIX: RootService/MKDocs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git identity
        run: |
          git config --global init.defaultBranch main
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          if ! git commit --allow-empty -m "GPG signing check"; then
            echo "❌ GPG signing failed, aborting."
            exit 1
          fi
          echo "✅ GPG signing is working."

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package-lock.json

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true

      - name: Install Node.js dependencies
        if: hashFiles('package.json') != ''
        run: |
          npm cache clean --force
          npm install --ignore-scripts --no-audit --no-fund --package-lock-only
          npm shrinkwrap

      - name: Install Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip pip-tools
          pip-compile requirements.in --quiet --no-header --no-annotate
          pip install --use-pep517 --upgrade -r requirements.txt

      - name: Node.js dependency audit
        run: |
          if [ -f package.json ]; then npm audit --audit-level=moderate || true; fi

      - name: Run Python security scans
        run: |
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt || true; fi
          if git ls-files '*.py' | grep -q .; then bandit -r . -q || true; fi

      - name: Python dependency audit (Safety)
        uses: pyproject/safety@v1
        with:
          args: check --full-report

      - name: Dependabot scan
        uses: github/dependabot-action@v2

      - name: Dependency review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

