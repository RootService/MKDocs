name: Summary CI

on:
  workflow_run:
    workflows: ["mkdocs CI"]
    types: [completed]

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  name: summary
  TAG_PREFIX: RootService/MKDocs
  LOG_TAIL_LINES: 500
  CHROME_PATH: /usr/bin/google-chrome

jobs:
  summary:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Collect workflow statuses and durations
        id: collect
        run: |
          ci_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "ci_url=$ci_url" >> $GITHUB_OUTPUT
          echo "ci_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT

          # CI duration from triggering workflow_run
          ci_start="${{ github.event.workflow_run.run_started_at }}"
          ci_end="${{ github.event.workflow_run.updated_at }}"

          duration_minutes () {
            start="$1"
            end="$2"
            if [ "$start" != "null" ] && [ "$end" != "null" ]; then
              start_epoch=$(date -d "$start" +%s)
              end_epoch=$(date -d "$end" +%s)
              echo $(( (end_epoch - start_epoch) / 60 ))
            else
              echo "0"
            fi
          }

          ci_dur=$(duration_minutes "$ci_start" "$ci_end")
          echo "ci_duration=$ci_dur" >> $GITHUB_OUTPUT

          fetch_status_and_duration () {
            wf_file=$1
            runs=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/$wf_file/runs?branch=main&per_page=1")
            status=$(echo "$runs" | jq -r '.workflow_runs[0].conclusion // "unknown"')
            url=$(echo "$runs" | jq -r '.workflow_runs[0].html_url // "unknown"')
            start=$(echo "$runs" | jq -r '.workflow_runs[0].run_started_at // "null"')
            end=$(echo "$runs" | jq -r '.workflow_runs[0].updated_at // "null"')
            dur=$(duration_minutes "$start" "$end")
            echo "$status;$url;$dur"
          }

          IFS=';' read lh_status lh_url lh_dur <<< "$(fetch_status_and_duration lighthouse_api_fixed.yml)"
          IFS=';' read sec_status sec_url sec_dur <<< "$(fetch_status_and_duration security.yml)"

          echo "lighthouse_status=$lh_status" >> $GITHUB_OUTPUT
          echo "lighthouse_url=$lh_url" >> $GITHUB_OUTPUT
          echo "lighthouse_duration=$lh_dur" >> $GITHUB_OUTPUT
          echo "security_status=$sec_status" >> $GITHUB_OUTPUT
          echo "security_url=$sec_url" >> $GITHUB_OUTPUT
          echo "security_duration=$sec_dur" >> $GITHUB_OUTPUT

          total=$((ci_dur + lh_dur + sec_dur))
          echo "total_duration=$total" >> $GITHUB_OUTPUT

      - name: Comment summary on PR
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: actions/github-script@v8
        env:
          TITLE: ${{ github.event.pull_request.title }}
        with:
          result-encoding: string
          retries: 3
          script: |
            function statusEmoji(status) {
              if (status === "success") return "üü¢";
              if (status === "failure") return "üî¥";
              if (status === "cancelled") return "‚ö™";
              return "üü°";
            }

            const title = process.env.TITLE;
            const pr = context.payload.workflow_run.pull_requests[0];
            if (pr) {
              const ciStatus = "${{ steps.collect.outputs.ci_status }}";
              const ciUrl = "${{ steps.collect.outputs.ci_url }}";
              const ciDur = "${{ steps.collect.outputs.ci_duration }}";
              const lhStatus = "${{ steps.collect.outputs.lighthouse_status }}";
              const lhUrl = "${{ steps.collect.outputs.lighthouse_url }}";
              const lhDur = "${{ steps.collect.outputs.lighthouse_duration }}";
              const secStatus = "${{ steps.collect.outputs.security_status }}";
              const secUrl = "${{ steps.collect.outputs.security_url }}";
              const secDur = "${{ steps.collect.outputs.security_duration }}";
              const total = "${{ steps.collect.outputs.total_duration }}";

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `üìä **Workflow Summary**\n\n- ${statusEmoji(ciStatus)} CI: **${ciStatus}** (‚è±Ô∏è ${ciDur} min) ‚Üí [Run](${ciUrl})\n- ${statusEmoji(lhStatus)} Lighthouse: **${lhStatus}** (‚è±Ô∏è ${lhDur} min) ‚Üí [Results](${lhUrl})\n- ${statusEmoji(secStatus)} Security: **${secStatus}** (‚è±Ô∏è ${secDur} min) ‚Üí [Results](${secUrl})\n\n‚è±Ô∏è **Total Duration:** ${total} min`
              });
            }
