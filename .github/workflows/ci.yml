name: Continuous Integration (CI)

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  schedule:
    - cron: '0 3 1 * *' # monatlich
    - cron: '0 4 * * 0' # wÃ¶chentlich
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  pull-requests: write

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  FORCE_COLOR: '1'
  PYTHONUNBUFFERED: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  TAG_PREFIX: RootService/MKDocs
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}
  LH_THRESHOLD_PERF: 80
  LH_THRESHOLD_A11Y: 80
  LH_THRESHOLD_BP: 80
  LH_THRESHOLD_SEO: 80

jobs:
  ci:
    name: Build, Lint, Lighthouse, Release
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Git Configure
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: GPG Import
        if: env.GPG_PRIVATE_KEY != ''
        run: |
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json
            **/pnpm-lock.yaml
            **/yarn.lock

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          check-latest: true
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements.in

      # Dependencies (deterministisch)
      - name: Install Node dependencies
        if: hashFiles('package.json') != ''
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack enable && corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable && corepack prepare yarn@stable --activate
            yarn install --frozen-lockfile
          else
            npm ci --ignore-scripts --no-audit --no-fund
          fi

      - name: Install Python dependencies
        if: hashFiles('requirements.txt','requirements.in') != ''
        run: |
          python -m pip install --upgrade pip pip-tools >/dev/null
          if [ -f requirements.in ]; then pip-compile requirements.in --strip-extras --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi
          python - <<'PY'
          import os, subprocess, sys
          if not os.path.exists('requirements.txt'):
              pkgs = [
                "mkdocs","mkdocs-material[imaging]","mkdocs-material-extensions",
                "mkdocs-minify-plugin","mkdocs-git-revision-date-localized-plugin",
                "mkdocs-git-committers-plugin-2","mkdocs-git-authors-plugin",
                "mkdocs-redirects","mkdocs-htmlproofer-plugin","mkdocs-static-i18n",
                "beautifulsoup4","cairosvg","cairocffi","cffi","tinycss2","cssselect2",
                "pillow","pip-audit","bandit"
              ]
              subprocess.check_call([sys.executable,"-m","pip","install","--quiet",*pkgs])
          PY

      # Auto-Updates nur geplant
      - name: Commit and push dependency updates (Node)
        if: github.event_name == 'schedule' && github.ref_name == 'main' && hashFiles('package.json') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'chore(deps): update npm dependencies'
          file_pattern: |
            package.json
            package-lock.json
            pnpm-lock.yaml
            yarn.lock
          branch: main
          add_options: -A
          push_options: --force-with-lease
          skip_dirty_check: false
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      - name: Commit and push updated Python dependencies
        if: github.event_name == 'schedule' && github.ref_name == 'main' && hashFiles('requirements.txt','requirements.in') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'chore(deps): update Python dependencies'
          file_pattern: |
            requirements.in
            requirements.txt
          branch: main
          add_options: -A
          push_options: --force-with-lease
          skip_dirty_check: false
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      - name: Run Linters
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options || true
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options || true
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options || true
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options || true
          fi
          JS_TS_CSS_MD_JSON_YML="$(git ls-files '*.cjs' '*.mjs' '*.js' '*.ts' '*.css' '*.md' '*.json' '*.yml' | tr '\n' ' ')"
          [ -n "$JS_TS_CSS_MD_JSON_YML" ] && npx --yes prettier --check $JS_TS_CSS_MD_JSON_YML || true
          MD_FILES="$(git ls-files '*.md' | tr '\n' ' ')"
          [ -n "$MD_FILES" ] && npx --yes markdownlint-cli2 $MD_FILES || true
          ESLINT_FILES="$(git ls-files '*.cjs' '*.mjs' '*.js' '*.ts' | tr '\n' ' ')"
          [ -n "$ESLINT_FILES" ] && npx --yes eslint $ESLINT_FILES || true
          CSS_FILES="$(git ls-files '*.css' | tr '\n' ' ')"
          [ -n "$CSS_FILES" ] && npx --yes stylelint $CSS_FILES || true
          HTML_FILES="$(git ls-files '*.html' | tr '\n' ' ')"
          [ -n "$HTML_FILES" ] && npx --yes htmlhint $HTML_FILES || true

      - name: Prettier write (scheduled only)
        if: github.event_name == 'schedule' && github.ref_name == 'main'
        run: |
          FILES="$(git ls-files '*.md' '*.yml' '*.json' '*.cjs' '*.mjs' '*.js' '*.ts' '*.css' '*.html' | tr '\n' ' ')"
          [ -n "$FILES" ] && npx --yes prettier --write $FILES || true

      - name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'chore(ci): update generated assets [skip ci]'
          file_pattern: |
            overrides/**
            snippets/**
            docs/**
          branch: ${{ github.ref_name }}
          add_options: -A
          push_options: --force-with-lease
          skip_dirty_check: false
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      - name: Build MkDocs site
        run: mkdocs build --clean

      - name: Generate CSP headers
        if: hashFiles('.github/scripts/generate_csp.py') != ''
        run: python .github/scripts/generate_csp.py

      - name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: mkdocs gh-deploy --force

      - name: Lighthouse CI (autorun)
        id: lhci1
        continue-on-error: true
        run: |
          npx lhci autorun --config ".lighthouserc.json" --upload.target=filesystem --upload.outputDir=.lighthouseci --timeout=240000 --quiet

      - name: Lighthouse CI (autorun via xvfb)
        if: ${{ steps.lhci1.conclusion == 'failure' }}
        continue-on-error: true
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb
          xvfb-run -a npx lhci autorun --config ".lighthouserc.json" --upload.target=filesystem --upload.outputDir=.lighthouseci --timeout=240000 --quiet

      - name: Upload LHCI artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouseci
          path: .lighthouseci
          if-no-files-found: ignore
          retention-days: 14
          include-hidden-files: true

      - name: Enforce Lighthouse thresholds
        run: |
          REPORT="$(ls -t .lighthouseci/lhr*.json 2>/dev/null | head -n1 || true)"
          if [ -z "$REPORT" ]; then
            echo "::error title=Lighthouse::No report found"
            exit 1
          fi
          node - "$REPORT" <<'NODE'
          const fs=require('fs'), r=JSON.parse(fs.readFileSync(process.argv[2],'utf8'));
          const T={performance:+process.env.LH_THRESHOLD_PERF,accessibility:+process.env.LH_THRESHOLD_A11Y,'best-practices':+process.env.LH_THRESHOLD_BP,seo:+process.env.LH_THRESHOLD_SEO};
          let fail=false;
          for (const [k,v] of Object.entries(r.categories||{})){
            const s=Math.round((v.score||0)*100);
            if (T[k] && s<T[k]){ console.log(`::error title=Lighthouse ${k}::Score ${s} < ${T[k]}`); fail=true; }
            else console.log(`::notice title=Lighthouse ${k}::Score ${s}`);
          }
          if (fail) process.exit(1);
          NODE

      - name: Lighthouse Scores ins Summary
        run: node .github/scripts/format-lighthouse.cjs >> "$GITHUB_STEP_SUMMARY" || true

      - name: Prepare Lighthouse markdown
        run: node .github/scripts/format-lighthouse.cjs > lhci-summary.md || true

      - name: Create Lighthouse Check
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.existsSync('lhci-summary.md') ? fs.readFileSync('lhci-summary.md','utf8') : 'No report';
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Lighthouse Report',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: 'neutral',
              output: { title: 'Lighthouse Scores', summary: 'Performance, Accessibility, Best Practices, SEO', text: summary }
            });

      - name: Dependency review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

      - name: Run semantic-release
        if: github.ref_name == 'main'
        run: npx semantic-release
