name: mkdocs

on:
  push:
    branches: ["**"]
    paths:
      - "docs/**"
      - "mkdocs.yml"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: ["**"]
    paths:
      - "docs/**"
      - "mkdocs.yml"
      - ".github/workflows/ci.yml"
  workflow_dispatch:
  schedule:
    - cron: "0 3 1 * *"

permissions: write-all

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_CACHE_DIR: "off"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  TAG_PREFIX: RootService/MKDocs
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}
  LOG_TAIL_LINES: 500
  CHROME_PATH: ""

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v5
      - id: setup_node
        name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip
      - id: setup_chrome
        name: Setup Chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v5
      - id: install_node
        name: Install Node.js dependencies
        if: ${{ hashFiles('package.json') != '' }}
        run: npm ci --ignore-scripts --no-audit --no-fund
      - id: install_python
        name: Install Python dependencies
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
      - id: cleanup-ports
        name: CleanUp Ports Options
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi
      - id: build_mkdocs
        name: Build MkDocs
        run: mkdocs build --clean
      - id: deploy_mkdocs
        name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: mkdocs gh-deploy --force
      - id: create_images
        name: Create responsive image variants
        run: |
          if [ -d site ]; then
            mapfile -t FILES < <(find site -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' \))
            for img in "${FILES[@]}"; do
              base="${img%.*}"
              [ -f "${base}.avif" ] || npx -y sharp-cli "$img" --avif -o "${base}.avif"
              [ -f "${base}.webp" ] || npx -y sharp-cli "$img" --webp -o "${base}.webp"
              [ -f "${base}.png" ]  || npx -y sharp-cli "$img" --png  -o "${base}.png"
              [ -f "${base}.gif" ]  || npx -y sharp-cli "$img" --gif  -o "${base}.gif"
            done
          fi
      - id: generate_csp
        name: Generate CSP headers
        run: |
          python - <<'PY'
          import os, base64, hashlib, pathlib
          from bs4 import BeautifulSoup
          SITE = pathlib.Path("site")
          script_hashes, style_hashes = set(), set()
          for htmlp in SITE.rglob("*.html"):
              soup = BeautifulSoup(htmlp.read_text("utf-8", errors="ignore"), "html.parser")
              for tag in soup.find_all("script"):
                  if tag.has_attr("src"): continue
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  script_hashes.add(f"'sha256-{h}'")
              for tag in soup.find_all("style"):
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  style_hashes.add(f"'sha256-{h}'")
          STYLE = " ".join(sorted(style_hashes))
          SCRIPT = " ".join(sorted(script_hashes))
          csp = (
              "upgrade-insecure-requests; "
              "default-src 'self'; "
              "base-uri 'self'; "
              "child-src 'self'; "
              "connect-src 'self' https: ws: wss: http://127.0.0.1:* http://localhost:*; "
              "font-src 'self' data: https://fonts.gstatic.com; "
              "form-action 'self' https:; "
              "frame-src 'self'; "
              "fenced-frame-src 'self'; "
              "img-src 'self' https: data:; "
              "manifest-src 'self'; "
              "media-src 'self' https: data:; "
              "object-src 'none'; "
              f"script-src 'self' {SCRIPT} 'report-sample'; "
              f"style-src 'self' https://fonts.googleapis.com {STYLE}; 'report-sample'; "
              "webrtc-src 'block'; "
              "worker-src 'self'; "
              "frame-ancestors 'self'; "
              "sandbox allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation; "
              "report-uri https://www.rootservice.org/default-endpoint.php; "
              "report-to default-endpoint"
          )
          (SITE/".nginx-csp.conf").write_text(f"add_header Content-Security-Policy \\"{csp}\\" always;\\n")
          (SITE/".htaccess").write_text(f"<IfModule mod_headers.c>\\n  Header set Content-Security-Policy \\"{csp}\\"\\n</IfModule>\\n")
          PY
      - id: upload_site
        name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-3.12
          path: site

  lint:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v5
      - id: run_linters
        name: Run linters
        run: |
          mkdir -p sarif
          npx markdownlint-cli2 --json docs/**/*.md > sarif/markdown.sarif || true
          npx eslint "docs/**/*.js" -f sarif -o sarif/eslint.sarif || true
          npx stylelint "docs/**/*.css" --custom-formatter=node_modules/stylelint-formatter-sarif/sarif.js > sarif/stylelint.sarif || true
          npx htmlhint "docs/**/*.html" || true
      - id: aggregate_sarif
        name: Aggregate SARIF results
        run: |
          jq -s '{ "version":"2.1.0","runs": map(.runs) | add }' sarif/*.sarif > results.sarif || echo '{"version":"2.1.0","runs":[]}' > results.sarif
      - id: upload_sarif
        name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: "lint"
          config_file: .github/codeql/codeql-config.yml

  lighthouse:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: download_site
        name: Download built site artifact
        uses: actions/download-artifact@v4
        with:
          name: site-3.12
          path: site
      - id: start_server
        name: Start local HTTP server
        run: |
          npx http-server ./site -p 8000 >/dev/null 2>&1 &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://localhost:8000 >/dev/null; then break; fi
            sleep 2
          done
      - id: run_lighthouse
        name: Run Lighthouse CI
        run: npx @lhci/cli autorun --rc-file ".lighthouserc.json" || true
      - id: extract_scores
        name: Extract Lighthouse scores
        run: |
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT" > lh-scores.json
            const fs = require('fs'); const r=JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            const out={}; for(const [k,v] of Object.entries(r.categories||{})){out[k]=Math.round((v.score||0)*100);}
            console.log(JSON.stringify(out,null,2)); fs.writeFileSync("lh-scores.json",JSON.stringify(out,null,2));
            NODE
          else echo '{"performance":0,"accessibility":0,"best-practices":0,"seo":0}' > lh-scores.json; fi
      - id: upload_scores
        name: Upload Lighthouse scores artifact
        uses: actions/upload-artifact@v4
        with:
          name: lh-scores
          path: lh-scores.json
      - id: convert_lighthouse_sarif
        name: Convert Lighthouse results to SARIF
        run: |
          mkdir -p sarif
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT" > sarif/lighthouse.sarif
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            const results = [];
            for (const [id,audit] of Object.entries(report.audits)) {
              if (audit.details && audit.details.type === 'table' && audit.score !== 1) {
                results.push({ruleId:id,message:{text:audit.title||id}});
              }
            }
            console.log(JSON.stringify({version:"2.1.0",runs:[{tool:{driver:{name:"Lighthouse"}},results}]}));
            NODE
          else echo '{"version":"2.1.0","runs":[]}' > sarif/lighthouse.sarif; fi
      - id: upload_lighthouse_sarif
        name: Upload Lighthouse SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: sarif-${{ github.sha }}
          path: sarif/
      - id: stop_server
        name: Stop local server
        if: always()
        run: |
          if [ -f server.pid ]; then kill "$(cat server.pid)" || true; fi

  security:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v5
      - id: setup_python
        name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: pip
      - id: scan_python
        name: Run Python security scans
        run: |
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt || true; fi
          if git ls-files '*.py' | grep -q .; then bandit -r . -q || true; fi
      - id: scan_npm
        name: Run NPM audit
        run: |
          if [ -f package.json ]; then npm audit --audit-level=high || true; fi
      - id: dependency_review
        name: Dependency review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
      - id: convert_security_sarif
        name: Convert security findings to SARIF
        run: |
          mkdir -p sarif
          node - <<'NODE' > sarif/security.sarif
          const results = [];
          results.push({ruleId:"pip-audit",message:{text:"pip-audit completed"}});
          results.push({ruleId:"bandit",message:{text:"bandit scan completed"}});
          results.push({ruleId:"npm-audit",message:{text:"npm audit completed"}});
          console.log(JSON.stringify({version:"2.1.0",runs:[{tool:{driver:{name:"Security"}},results}]}));
          NODE
      - id: upload_security_sarif
        name: Upload security SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: sarif-${{ github.sha }}
          path: sarif/

  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v5
      - id: init_codeql
        name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
      - id: autobuild_codeql
        name: Autobuild CodeQL
        uses: github/codeql-action/autobuild@v3
      - id: analyze_codeql
        name: Analyze with CodeQL
        uses: github/codeql-action/analyze@v3

  summary:
    needs: [lint, lighthouse, security, codeql]
    runs-on: ubuntu-latest
    steps:
      - id: configure_git
        name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - id: download_scores
        name: Download Lighthouse scores artifact
        uses: actions/download-artifact@v4
        with:
          name: lh-scores
          path: .
      - id: publish_lighthouse_scores
        name: Publish Lighthouse scores to gh-pages
        if: github.ref_name == 'main'
        run: |
          git fetch origin gh-pages || true
          git checkout gh-pages || git checkout --orphan gh-pages
          cp ../lh-scores.json ./lh-scores.json || true
          git add lh-scores.json
          git commit -m "ci: update Lighthouse scores [skip ci]" || true
          git push origin gh-pages
      - id: auto_commit
        name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(ci): update generated assets [skip ci]"
          file_pattern: |
            overrides/**
            snippets/**
            fixes/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          skip_fetch: true
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false
      - id: slack_notify
        name: Notify Slack on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\\"text\\":\\"Workflow failed: $GITHUB_WORKFLOW ($GITHUB_RUN_NUMBER) on $GITHUB_REF\\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
