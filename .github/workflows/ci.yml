name: Continuous Integration (CI)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 3 1 * *" # Run monthly
    - cron: "0 4 * * 0" # Weekly deps update
  workflow_dispatch:

permissions:
  contents: write
  pages: write

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  TAG_PREFIX: RootService/MKDocs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          echo test | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -u "$KEYID" --clearsign >/dev/null
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true

      - run: echo "CHROME_PATH=${{ steps.chrome.outputs.chrome-path }}" >> $GITHUB_ENV

      - name: Install Node.js dependencies
        if: hashFiles('package.json') != ''
        run: |
          npm cache clean --force --quiet
          npm ci --ignore-scripts --no-audit --no-fund --quiet

      - name: Install Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: CleanUp Ports Options
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi

      - run: npm run lint:md
      - run: npm run lint:js
      - run: npm run lint:css
      - run: npm run lint:html

      - name: Build MkDocs site
        run: mkdocs build --clean

      - name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: mkdocs gh-deploy --force

      - name: Generate CSP headers
        run: python .github/scripts/generate_csp.py

      - name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Download built site artifact
        uses: actions/download-artifact@v5
        with:
          name: site
          path: site

      - name: Start local HTTP server
        run: |
          npx http-server ./site -p 8000 --silent &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server ist erreichbar."
              break
            fi
            echo "⏳ Warte auf Server (Versuch $i)..."
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8000 >/dev/null; then
            echo "❌ Server konnte nicht gestartet werden."
            exit 1
          fi

      - name: Run Lighthouse CI
        run: npx @lhci/cli autorun --rc-file ".lighthouserc.json" --quiet || true

      - name: Check Lighthouse thresholds
        run: |
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT"
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            const thresholds = { performance: 80, accessibility: 80, 'best-practices': 80, seo: 80 };
            let failed = false;
            for (const [k,v] of Object.entries(report.categories||{})) {
              const score = Math.round((v.score||0)*100);
              console.log(`${k}: ${score}`);
              if (thresholds[k] && score < thresholds[k]) {
                console.error(`❌ ${k} score ${score} < ${thresholds[k]}`);
                failed = true;
              }
            }
            if (failed) process.exit(1);
            NODE
          fi

      - name: Print Lighthouse scores
        run: |
          echo '## Lighthouse Scores' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| Kategorie | Score |' >> $GITHUB_STEP_SUMMARY
          echo '|-----------|-------|' >> $GITHUB_STEP_SUMMARY
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT" >> $GITHUB_STEP_SUMMARY
            const fs = require('fs'); const r=JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            for(const [k,v] of Object.entries(r.categories||{})){
              console.log(`| ${k} | ${Math.round((v.score||0)*100)} |`);
            }
            NODE
          fi

      - name: Upload Lighthouse scores artifact
        uses: actions/upload-artifact@v4
        with:
          name: lh-scores
          path: ".lighthouseci/*.json"

      - name: Stop local server
        if: always()
        run: |
          if [ -f server.pid ]; then kill "$(cat server.pid)" || true; fi

      - name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(ci): update generated assets [skip ci]"
          file_pattern: |
            overrides/**
            snippets/**
            docs/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

  npm-deps-update:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v5
        with:
          node-version: "lts/*"

      - name: Update npm dependencies
        if: hashFiles('package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Commit and push dependency updates
        if: hashFiles('package.json') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update npm dependencies"
          file_pattern: |
            package.json
            package-lock.json
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

  pip-deps-update:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Update Python dependencies
        if: hashFiles('requirements.in') != '' || hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Commit and push updated Python dependencies
        if: hashFiles('requirements.in') != '' || hashFiles('requirements.txt') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update Python dependencies"
          file_pattern: |
            requirements.txt
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false
