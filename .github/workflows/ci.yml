name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

env:
  TAG_PREFIX: RootService/MKDocs
  LOG_TAIL_LINES: 50   # configurable number of log lines

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      mkdocs_status: ${{ steps.mkdocs_summary.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: Install dependencies
        run: npm ci

      - name: Install MkDocs
        run: |
          pip install mkdocs
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build MkDocs site
        id: mkdocs_build
        run: |
          set -o pipefail
          mkdocs build 2>&1 | tee build.log

      - name: Archive site
        if: always()
        run: |
          tar -czf site.tar.gz site

      - name: Upload site artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 1

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          retention-days: 5

      - name: MkDocs summary
        id: mkdocs_summary
        if: always()
        run: |
          if [ -f site/index.html ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Extract last log lines
        if: failure()
        id: log_tail
        run: |
          tail -n $LOG_TAIL_LINES build.log > log_tail.txt
          echo 'log<<EOF' >> $GITHUB_OUTPUT
          cat log_tail.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Comment MkDocs result on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const status = "${{ steps.mkdocs_summary.outputs.status }}";
            const pr = context.payload.pull_request;
            const runId = context.runId;
            const artifactUrl = `https://github.com/${{ context.repo.owner }}/${{ context.repo.repo }}/actions/runs/${runId}`;
            const log = `

\`\`\`
${{ steps.log_tail.outputs.log || '' }}
\`\`\``;
            if (pr) {
              let body = `ðŸ“– MkDocs Build completed with status: **${status}**\n\nðŸ“¦ [Download Site Artifact](${artifactUrl})\nðŸ“œ [Download Full Build Log](${artifactUrl})`;
              if (status === "failure") {
                body += `\n\nðŸš¨ Build Log (last ${process.env.LOG_TAIL_LINES} lines):${log}`;
              }
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body
              });
            }
