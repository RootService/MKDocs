name: Continuous Integration (CI)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 3 1 * *" # Run monthly

permissions:
  contents: write
  pages: write

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  TAG_PREFIX: RootService/MKDocs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          echo test | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -u "$KEYID" --clearsign >/dev/null
          if ! git commit --allow-empty -m "GPG signing check"; then
            echo "❌ GPG signing failed, aborting."
            exit 1
          fi
          echo "✅ GPG signing is working."

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package-lock.json

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true
        run: echo "CHROME_PATH=${{ steps.chrome.outputs.chrome-path }}" >> $GITHUB_ENV

      - name: Install Node.js dependencies
        if: hashFiles('package.json') != ''
        run: |
          npm cache clean --force
          npm install --ignore-scripts --no-audit --no-fund --package-lock-only
          npm shrinkwrap

      - name: Install Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip pip-tools
          pip-compile requirements.in --quiet --no-header --no-annotate
          pip install --use-pep517 --upgrade -r requirements.txt

      - name: CleanUp Ports Options
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi

      - name: Build MkDocs site
        run: mkdocs build --clean

      - name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: mkdocs gh-deploy --force

      - name: Generate CSP headers
        run: |
          python - <<'PY'
          import os, base64, hashlib, pathlib
          from bs4 import BeautifulSoup  # pip install beautifulsoup4
          SITE = pathlib.Path("site")
          NGINX_CONF = SITE / ".nginx-csp.conf"
          APACHE_HTA = SITE / ".htaccess"
          CSP_ENV = os.getenv("CSP_ENV", "production").lower()
          script_hashes, style_hashes = set(), set()
          for htmlp in SITE.rglob("*.html"):
              soup = BeautifulSoup(htmlp.read_text(encoding="utf-8", errors="ignore"), "html.parser")
              for tag in soup.find_all("script"):
                  if tag.has_attr("src"): continue
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  script_hashes.add(f"'sha256-{h}'")
              for tag in soup.find_all("style"):
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  style_hashes.add(f"'sha256-{h}'")
          STYLE = " ".join(sorted(style_hashes))
          SCRIPT = " ".join(sorted(script_hashes))
          if CSP_ENV == "preview":
              csp = (
                  "upgrade-insecure-requests; "
                  "default-src 'self'; "
                  "base-uri 'self'; "
                  "child-src 'self'; "
                  "connect-src 'self' https: ws: wss: http://127.0.0.1:* http://localhost:*; "
                  "font-src 'self' data: https://fonts.gstatic.com; "
                  "form-action 'self' https:; "
                  "frame-src 'self'; "
                  "fenced-frame-src 'self'; "
                  "img-src 'self' https: data:; "
                  "manifest-src 'self'; "
                  "media-src 'self' https: data:; "
                  "object-src 'none'; "
                  f"script-src 'self' {SCRIPT} 'report-sample'; "
                  f"style-src 'self' https://fonts.googleapis.com {STYLE}; 'report-sample'; "
                  "webrtc-src 'block'; "
                  "worker-src 'self'; "
                  "frame-ancestors 'self'; "
                  "base-uri 'self'; "
                  "sandbox allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation; "
                  "report-uri https://www.rootservice.org/default-endpoint.php; "
                  "report-to default-endpoint"
              )
          else:
              csp = (
                  "upgrade-insecure-requests; "
                  "default-src 'self'; "
                  "base-uri 'self'; "
                  "child-src 'self'; "
                  "connect-src 'self' https: ws: wss: http://127.0.0.1:* http://localhost:*; "
                  "font-src 'self' data: https://fonts.gstatic.com;; "
                  "form-action 'self' https:; "
                  "frame-src 'self'; "
                  "fenced-frame-src 'self'; "
                  "img-src 'self' https: data:; "
                  "manifest-src 'self'; "
                  "media-src 'self' https: data:; "
                  "object-src 'none'; "
                  f"script-src 'self' {SCRIPT} 'report-sample'; "
                  f"style-src 'self' https://fonts.googleapis.com {STYLE}; 'report-sample'; "
                  "webrtc-src 'block'; "
                  "worker-src 'self'; "
                  "frame-ancestors 'none'; "
                  "base-uri 'self'; "
                  "sandbox allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation; "
                  "report-uri https://www.rootservice.org/default-endpoint.php; "
                  "report-to default-endpoint"
              )
          NGINX_CONF.write_text(
              f"add_header Content-Security-Policy \"{csp}\" always;\n",
              encoding="utf-8",
          )
          APACHE_HTA.write_text(
              "<IfModule mod_headers.c>\n"
              f'  Header always set Content-Security-Policy "{csp}"\n'
              "</IfModule>\n",
              encoding="utf-8",
          )
          PY

      - name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Start local HTTP server
        run: |
          npx http-server ./site -p 8000 --silent &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server ist erreichbar."
              break
            fi
            echo "⏳ Warte auf Server (Versuch $i)..."
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8000 >/dev/null; then
            echo "❌ Server konnte nicht gestartet werden."
            exit 1
          fi

      - name: Run Lighthouse CI
        run: npx @lhci/cli autorun --rc-file ".lighthouserc.json" || true

      - name: Extract Lighthouse scores
        run: |
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT" > lh-scores.json
            const fs = require('fs'); const r=JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            const out={}; for(const [k,v] of Object.entries(r.categories||{})){out[k]=Math.round((v.score||0)*100);}
            console.log(JSON.stringify(out,null,2)); fs.writeFileSync("lh-scores.json",JSON.stringify(out,null,2));
            NODE
          else echo '{"performance":0,"accessibility":0,"best-practices":0,"seo":0}' > lh-scores.json; fi

      - name: Stop local server
        if: always()
        run: |
          if [ -f server.pid ]; then kill "$(cat server.pid)" || true; fi

      - name: Upload Lighthouse scores artifact
        uses: actions/upload-artifact@v4
        with:
          name: lh-scores
          path: lh-scores.json

      - name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(ci): update generated assets [skip ci]"
          file_pattern: |
            overrides/**
            snippets/**
            docs/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          skip_fetch: true
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false
