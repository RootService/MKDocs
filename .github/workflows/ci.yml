name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: pip-${{ runner.os }}-
          retention-days: 3

      - uses: actions/cache@v4
        with:
          path: .cache
          key: mkdocs-${{ github.sha }}
          restore-keys: mkdocs-
          retention-days: 3

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt || true

      - run: markdownlint .
      - run: pytest --maxfail=1 --disable-warnings -q
      - run: mkdocs build

      - uses: actions/upload-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          name: site-latest
          path: site
          retention-days: 3

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site
        continue-on-error: true

      - id: deployment
        uses: actions/deploy-pages@v4

  lighthouse:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: pip-${{ runner.os }}-
          retention-days: 3

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - uses: actions/download-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site
        continue-on-error: true

      - uses: actions/download-artifact@v4
        with:
          name: site-latest
          path: site
        continue-on-error: true

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
          cache-retention-days: 3

      - run: npm ci

      - run: |
          npx http-server ./site -p 8080 &
          echo $! > /tmp/http-server.pid
          sleep 2

      - run: |
          mkdir -p .screenshots
          node tools/generate-screenshots.js
        env:
          BASE_URL: "http://localhost:8080/"

      - uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: ./.screenshots
          retention-days: 7

      - uses: actions/upload-artifact@v4
        with:
          name: screenshots-latest
          path: ./.screenshots
          retention-days: 3

      - id: lhci
        run: |
          mkdir -p .lighthouse
          lhci autorun --config=.lighthouserc.json --rc-overrides=ci --assert=none --outputDir=.lighthouse
          LHR=$(ls -1t .lighthouse/*.report.json | head -n1)
          PERF=$(jq -r '.categories.performance.score * 100' "$LHR")
          A11Y=$(jq -r '.categories.accessibility.score * 100' "$LHR")
          BP=$(jq -r '.categories["best-practices"].score * 100' "$LHR")
          SEO=$(jq -r '.categories.seo.score * 100' "$LHR")
          echo "perf_score=${PERF}" >> $GITHUB_OUTPUT
          echo "a11y_score=${A11Y}" >> $GITHUB_OUTPUT
          echo "bp_score=${BP}" >> $GITHUB_OUTPUT
          echo "seo_score=${SEO}" >> $GITHUB_OUTPUT

      - run: lhci assert --config=.lighthouserc.json --rc-overrides=ci
      - run: lhci autorun --config=.lighthouserc.json --rc-overrides=wcag

      - if: always()
        run: kill $(cat /tmp/http-server.pid) || true

      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-${{ github.sha }}
          path: ./.lighthouse
          retention-days: 7

      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-latest
          path: ./.lighthouse
          retention-days: 3

  toc:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: technote-space/toc-generator@v4
        with:
          TARGET_PATHS: README.md
          FOLDING: true

  label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
