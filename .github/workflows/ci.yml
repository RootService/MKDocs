name: mkdocs

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

# Vollzugriff für Commit/Artifacts/Annotations
permissions: write-all

# Parallel laufende Runs pro Ref abbrechen
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  name: mkdocs
  CI: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  LOG_TAIL_LINES: 500
  TAG_PREFIX: RootService/MKDocs
  CHROME_PATH: "" # via setup-chrome gesetzt
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}

jobs:
  setup:
    name: Setup • (${{ matrix.os }})
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Configure Git Credentials
        id: ${{ runner.os }}-git-config
        continue-on-error: false
        timeout-minutes: 5
        run: |
          set -e
          git config --global init.defaultBranch main
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Checkout
        id: ${{ runner.os }}-repo-checkout
        continue-on-error: false
        timeout-minutes: 5
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        id: ${{ runner.os }}-setup-npm
        continue-on-error: false
        timeout-minutes: 5
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install Node.js deps
        id: ${{ runner.os }}-install-npm
        continue-on-error: false
        timeout-minutes: 5
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          set -e
          npm install --no-audit --no-fund

      - name: Cache npm
        id: ${{ runner.os }}-cache-npm
        continue-on-error: false
        timeout-minutes: 5
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Setup Python
        id: ${{ runner.os }}-setup-pip
        continue-on-error: false
        timeout-minutes: 5
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python deps
        id: ${{ runner.os }}-install-pip
        continue-on-error: false
        timeout-minutes: 5
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt

      - name: Cache pip
        id: ${{ runner.os }}-cache-pip
        continue-on-error: false
        timeout-minutes: 5
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Setup Chrome
        id: ${{ runner.os }}-setup-chrome
        continue-on-error: false
        timeout-minutes: 5
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true

      - name: Export CHROME_PATH
        id: ${{ runner.os }}-export-chrome
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          echo "CHROME_PATH=${{ steps.setup-chrome.outputs.chrome-path }}" >> $GITHUB_ENV

  build:
    name: Build • (${{ matrix.os }})
    needs: setup
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Set CSP_ENV by event
        id: ${{ runner.os }}-set-csp-env
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "CSP_ENV=preview" >> $GITHUB_ENV
          else
            echo "CSP_ENV=production" >> $GITHUB_ENV
          fi

      - name: CleanUp Ports Options (./snippets/ports)
        id: ${{ runner.os }}-cleanup-ports-options
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/\,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/\_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi

      - name: Lint Markdown (./docs)
        id: ${{ runner.os }}-lint-markdown
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -d docs ]; then
            npx -y markdownlint-cli2 "docs/**/*.md"
          else
            echo "No docs directory. Skipping."
          fi

      - name: Build MkDocs
        id: ${{ runner.os }}-mkdocs_build
        continue-on-error: false
        timeout-minutes: 15
        run: |
          set -e
          mkdocs build --clean
          build_rc=${PIPESTATUS[0]}
          if [ $build_rc -eq 0 ]; then
            mkdocs gh-deploy --force
          fi
          exit $build_rc

      - name: Create image variants (./site)
        id: ${{ runner.os }}-lint-images
        continue-on-error: true
        timeout-minutes: 10
        run: |
          set -e
          if [ -d site ]; then
            mapfile -t FILES < <(find site -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' \))
            for img in "${FILES[@]}"; do
              base="${img%.*}"
              [ -f "${base}.avif" ] || npx -y sharp-cli "$img" --avif -o "${base}.avif"
              [ -f "${base}.webp" ] || npx -y sharp-cli "$img" --webp -o "${base}.webp"
              [ -f "${base}.png" ]  || npx -y sharp-cli "$img" --png  -o "${base}.png"
              [ -f "${base}.gif" ]  || npx -y sharp-cli "$img" --gif  -o "${base}.gif"
            done
          else
            echo "No site directory. Skipping image conversion."
          fi

      - name: Lint JavaScript (./site)
        id: ${{ runner.os }}-lint-javascripts
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -d site ]; then
            if compgen -G "site/**/*.js" > /dev/null; then
              npx -y eslint "site/**/*.js" --no-error-on-unmatched-pattern || true
            else
              echo "No JS files. Skipping."
            fi
          else
            echo "No site directory. Skipping image conversion."
          fi

      - name: Lint CSS (./site)
        id: ${{ runner.os }}-lint-stylesheets
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -d site ]; then
            if compgen -G "site/**/*.css" > /dev/null; then
              npx -y stylelint "site/**/*.css" || true
            else
              echo "No CSS files. Skipping."
            fi
          else
            echo "No site directory. Skipping image conversion."
          fi

      - name: Lint HTML (./site)
        id: ${{ runner.os }}-lint-htmlpages
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -d site ]; then
            if compgen -G "site/**/*.html" > /dev/null; then
              npx -y htmlhint "site/**/*.html" || true
            else
              echo "No HTML files. Skipping."
            fi
          else
            echo "No site directory. Skipping image conversion."
          fi

      - name: Generate CSP headers from built HTML
        continue-on-error: true
        timeout-minutes: 5
        if: always()
        run: |
          set -e
          python - <<'PY'
          import os, base64, hashlib, pathlib
          from bs4 import BeautifulSoup
          SITE = pathlib.Path("site")
          NGINX_CONF = SITE / ".nginx-csp.conf"
          APACHE_HTA = SITE / ".htaccess"
          CSP_ENV = os.getenv("CSP_ENV","production").lower()
          script_hashes, style_hashes = set(), set()
          for htmlp in SITE.rglob("*.html"):
              soup = BeautifulSoup(htmlp.read_text(encoding="utf-8", errors="ignore"), "html.parser")
              for tag in soup.find_all("script"):
                  if tag.has_attr("src"): continue
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  script_hashes.add(f"'sha256-{h}'")
              for tag in soup.find_all("style"):
                  content = (tag.string or "").encode("utf-8")
                  if not content.strip(): continue
                  h = base64.b64encode(hashlib.sha256(content).digest()).decode()
                  style_hashes.add(f"'sha256-{h}'")
          STYLE = " ".join(sorted(style_hashes))
          SCRIPT = " ".join(sorted(script_hashes))
          if CSP_ENV == "preview":
              csp = (
                  "upgrade-insecure-requests; "
                  "default-src 'self'; "
                  "base-uri 'self'; "
                  "child-src 'self'; "
                  "connect-src 'self' https: ws: wss: http://127.0.0.1:* http://localhost:*; "
                  "font-src 'self' data: https://fonts.gstatic.com; "
                  "form-action 'self' https:; "
                  "frame-src 'self'; "
                  "fenced-frame-src 'self'; "
                  "img-src 'self' https: data:; "
                  "manifest-src 'self'; "
                  "media-src 'self' https: data:; "
                  "object-src 'none'; "
                  f"script-src 'self' {SCRIPT} 'report-sample'; "
                  f"style-src 'self' https://fonts.googleapis.com {STYLE}; 'report-sample'; "
                  "webrtc-src 'block'; "
                  "worker-src 'self'; "
                  "frame-ancestors 'self'; "
                  "base-uri 'self'; "
                  "sandbox allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation; "
                  "report-uri https://www.rootservice.org/default-endpoint.php; "
                  "report-to default-endpoint"
              )
          else:
              csp = (
                  "upgrade-insecure-requests; "
                  "default-src 'self'; "
                  "base-uri 'self'; "
                  "child-src 'self'; "
                  "connect-src 'self' https: ws: wss: http://127.0.0.1:* http://localhost:*; "
                  "font-src 'self' data: https://fonts.gstatic.com;; "
                  "form-action 'self' https:; "
                  "frame-src 'self'; "
                  "fenced-frame-src 'self'; "
                  "img-src 'self' https: data:; "
                  "manifest-src 'self'; "
                  "media-src 'self' https: data:; "
                  "object-src 'none'; "
                  f"script-src 'self' {SCRIPT} 'report-sample'; "
                  f"style-src 'self' https://fonts.googleapis.com {STYLE}; 'report-sample'; "
                  "webrtc-src 'block'; "
                  "worker-src 'self'; "
                  "frame-ancestors 'none'; "
                  "base-uri 'self'; "
                  "sandbox allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation; "
                  "report-uri https://www.rootservice.org/default-endpoint.php; "
                  "report-to default-endpoint"
              )
          NGINX_CONF.write_text(f"add_header Content-Security-Policy \"{csp}\" always;\n", encoding="utf-8")
          APACHE_HTA.write_text("<IfModule mod_headers.c>\n" + f'  Header always set Content-Security-Policy "{csp}"\n' + "</IfModule>\n", encoding="utf-8")
          print("CSP headers generated:", NGINX_CONF, APACHE_HTA)
          PY

      - name: MkDocs summary
        id: ${{ runner.os }}-mkdocs_summary
        continue-on-error: true
        timeout-minutes: 5
        if: always()
        run: |
          set -e
          if [ -d site ]; then
            if [ -f site/index.html ]; then
              echo "status=success" >> "$GITHUB_OUTPUT"
            else
              echo "status=failure" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No site directory. Skipping image conversion."
          fi

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 5
          include-hidden-files: true

  lighthouse:
    name: Lighthouse • (${{ matrix.os }})
    needs: build
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Ensure LHCI config files
        id: ${{ runner.os }}-lhci_config
        continue-on-error: false
        timeout-minutes: 5
        run: |
          set -e
          test -f .lighthouserc.json || echo "⚠ Missing .lighthouserc.json (softfail)" || true
          test -f .desktopConfig.json || echo "⚠ Missing .desktopConfig.json (softfail)" || true

      - name: Serve ./site on :8000
        id: ${{ runner.os }}-serve_site
        continue-on-error: false
        timeout-minutes: 5
        run: |
          set -e
          npx -y http-server ./site -p 8000 >/dev/null 2>&1 &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://localhost:8000 >/dev/null; then
              echo "Server is up."
              break
            fi
            sleep 2
          done

      - name: Run Lighthouse CI
        id: ${{ runner.os }}-lhci_autorun
        continue-on-error: true
        timeout-minutes: 15
        env:
          CHROME_PATH: ${{ env.CHROME_PATH }}
          LHCI_GITHUB_APP_TOKEN: ${{ env.LHCI_GITHUB_APP_TOKEN }}
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        run: |
          set -e
          npx -y @lhci/cli autorun --rc-file ".lighthouserc.json" || true

      - name: Derive fixes from Lighthouse report -> ./fixes
        id: ${{ runner.os }}-lhci_fixes
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          mkdir -p fixes
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json 2>/dev/null | head -n1 || true)"
          if [ -z "$REPORT" ]; then
            echo "No LHCI JSON report found." | tee "fixes/lighthouse-${{ github.sha }}.md"
          else
            node - <<'NODE' "$REPORT" > "fixes/lighthouse-${{ github.sha }}.md"
            const fs = require('fs');
            const path = process.argv[1];
            const data = JSON.parse(fs.readFileSync(path,'utf8'));
            const cats = data.categories || {};
            const low = Object.entries(cats)
              .map(([k,v]) => ({id:k, title:v.title, score:v.score}))
              .filter(c => c.score < 0.90);
            const audits = data.audits || {};
            const items = Object.values(audits)
              .filter(a => a.score !== null && a.score < 1)
              .map(a => ({
                id: a.id, title: a.title, desc: a.description || '',
                help: (a.details && a.details.help) || (a.warning || ''),
                doc: a.documentation || a.warnings || a.url || ''
              }));
            function linkFor(a){
              if (a?.details?.links && a.details.links[0]?.url) return a.details.links[0].url;
              if (a?.id) return `https://web.dev/${a.id}/`;
              return '';
            }
            let out = [];
            out.push(`# Lighthouse Fixes (${new Date().toISOString()})`);
            out.push('');
            if(low.length){ out.push('## Low scoring categories (< 0.90)'); low.forEach(c=>out.push(`- ${c.title}: ${(c.score*100).toFixed(0)}%`)); out.push(''); }
            out.push('## Suggested actions');
            items.slice(0,100).forEach(a=>{
              out.push(`- **${a.title}** — ${a.desc.replace(/\n/g,' ')}`);
              const l = linkFor(a) || '';
              if (l) out.push(`  - Docs: ${l}`);
            });
            console.log(out.join('\n'));
            NODE
            echo "Fixes generated at fixes/lighthouse-${{ github.sha }}.md"
          fi

      - name: Stop server
        if: always()
        run: |
          set -e
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" 2>/dev/null || true
          fi

  security:
    name: Security • (${{ matrix.os }})
    needs: build
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Security checks
        id: ${{ runner.os }}-security_checks
        continue-on-error: true
        timeout-minutes: 5
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt || (echo "::warning::pip-audit found issues"; exit 1)
          else
            echo "No requirements.txt. Skipping pip-audit."
          fi
          if git ls-files '*.py' | grep -q .; then
            bandit -r . -q || (echo "::warning::bandit found issues"; exit 1)
          else
            echo "No Python files. Skipping bandit."
          fi
          if [ -f package.json ] || [ -f package-lock.json ]; then
            npm audit --audit-level=high || (echo "::warning::npm audit found high+ issues"; exit 1)
          else
            echo "No package.json. Skipping npm audit."
          fi

      - name: Dependency Review
        id: ${{ runner.os }}-dependency_checks
        continue-on-error: true
        timeout-minutes: 5
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  summary:
    name: Summary • (${{ matrix.os }})
    needs: [build, security, lighthouse]
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    steps:
      - name: Upload reports as artifact
        id: ${{ runner.os }}-upload-reports
        continue-on-error: true
        timeout-minutes: 5
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ runner.os }}-${{ github.sha }}
          path: |
            .lighthouseci/**
            fixes/**
          if-no-files-found: ignore
          retention-days: 14

      - name: Commit generated assets (overrides + fixes)
        id: ${{ runner.os }}-commit-assets
        continue-on-error: true
        timeout-minutes: 5
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): add image variants and Lighthouse fixes [skip ci]"
          file_pattern: |
            overrides/**
            fixes/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          skip_fetch: true
          add_options: '-A'
          push_options: '--force-with-lease'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: '41898282+github-actions[bot]@users.noreply.github.com'
          tagging_message: "${{ env.TAG_PREFIX }}-${{ github.run_number }}"
          create_branch: false

      - name: Summary
        id: ${{ runner.os }}-summary
        continue-on-error: true
        timeout-minutes: 5
        if: always()
        run: |
          {
            echo "## Run Summary"
            echo "- OS: ${{ matrix.os }}"
            echo "- Ref: ${{ github.ref }}"
            echo "- SHA: ${{ github.sha }}"
            echo "- CSP_ENV: ${{ env.CSP_ENV }}"
            echo ""
            echo "### Outputs"
            echo "- Lighthouse report: artifact 'reports-${{ runner.os }}-${{ github.sha }}'"
            echo "- Fixes: ./fixes/lighthouse-${{ github.sha }}.md"
          } >> "$GITHUB_STEP_SUMMARY"
