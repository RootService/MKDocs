name: Continuous Integration (CI)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "0 3 1 * *" # Run monthly
    - cron: "0 4 * * 0" # Weekly deps update
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  pull-requests: write

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  TAG_PREFIX: RootService/MKDocs
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}
  LH_THRESHOLD_PERF: 80
  LH_THRESHOLD_A11Y: 80
  LH_THRESHOLD_BP: 80
  LH_THRESHOLD_SEO: 80

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json', 'package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements.in') }}

          restore-keys: |
            v1-pip-${{ runner.os }}-

      - name: Install Python dependencies
        if: hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v2
        with:
          chrome-version: stable
          install-chromedriver: true
          install-dependencies: true

      - run: echo "CHROME_PATH=${{ steps.setup-chrome.outputs.chrome-path }}" >> $GITHUB_ENV

      - name: CleanUp Ports Options
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi

      - name: Run Linters
        continue-on-error: true
        run: |
          npx prettier --check {site,docs,overrides}/**/*.{js,ts,css,md,json,yml} || true
          npx markdownlint-cli2 {site,docs,overrides}/**/*.md || true
          npx eslint {site,docs,overrides}/**/*.{js,ts,md} || true
          npx stylelint {site,docs,overrides}/**/*.css || true
          npx htmlhint {site,docs,overrides}/**/*.html || true

      - name: Build MkDocs site
        run: mkdocs build --clean

      - name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: mkdocs gh-deploy --force

      - name: Generate CSP headers
        run: python .github/scripts/generate_csp.py

      - name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Download built site artifact
        uses: actions/download-artifact@v5
        with:
          name: site
          path: site

      - name: Start local HTTP server
        run: |
          npx http-server ./site -p 8000 --silent &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server ist erreichbar."
              break
            fi
            echo "⏳ Warte auf Server (Versuch $i)..."
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8000 >/dev/null; then
            echo "❌ Server konnte nicht gestartet werden."
            exit 1
          fi

      - name: Run Lighthouse CI
        run: |
          npx lhci autorun --config ".lighthouserc.json" --failOnUploadFailure --timeout=240000 --quiet || true
#          sudo apt-get update && sudo apt-get install -y xvfb
#          xvfb-run -a npx lhci autorun --config ".lighthouserc.json" --failOnUploadFailure --timeout=240000 --quiet || true

      - name: Print Lighthouse scores
        continue-on-error: true
        run: |
          echo '## Lighthouse Scores' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| Kategorie | Score |' >> $GITHUB_STEP_SUMMARY
          echo '|-----------|-------|' >> $GITHUB_STEP_SUMMARY
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT" >> $GITHUB_STEP_SUMMARY
            const fs = require('fs'); const r=JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            for(const [k,v] of Object.entries(r.categories||{})){
              console.log(`| ${k} | ${Math.round((v.score||0)*100)} |`);
            }
            NODE
          fi

      - name: Check Lighthouse thresholds
        continue-on-error: true
        run: |
          REPORT="$(ls -t .lighthouseci/*-lhr-*.json | head -n1 || true)"
          if [ -n "$REPORT" ]; then
            node - <<'NODE' "$REPORT"
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync(process.argv[1],'utf8'));
            const thresholds = {
              performance: parseInt(process.env.LH_THRESHOLD_PERF, 10),
              accessibility: parseInt(process.env.LH_THRESHOLD_A11Y, 10),
              'best-practices': parseInt(process.env.LH_THRESHOLD_BP, 10),
              seo: parseInt(process.env.LH_THRESHOLD_SEO, 10)
            };
            let failed = false;
            for (const [k,v] of Object.entries(report.categories||{})) {
              const score = Math.round((v.score||0)*100);
              if (thresholds[k] && score < thresholds[k]) {
                console.log(`::error title=Lighthouse ${k}::Score ${score} < threshold ${thresholds[k]}`);
                failed = true;
              } else {
                console.log(`::notice title=Lighthouse ${k}::Score ${score}`);
              }
            }
            if (failed) process.exit(1);
            NODE
          fi

      - name: Comment Lighthouse scores on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const reportFiles = fs.readdirSync('.lighthouseci').filter(f => f.endsWith('-lhr.json'));
            if (reportFiles.length === 0) {
              core.warning('No Lighthouse report found');
              return;
            }
            const reportPath = reportFiles.map(f => path.join('.lighthouseci', f))
              .sort((a,b) => fs.statSync(b).mtimeMs - fs.statSync(a).mtimeMs)[0];
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            let body = '### ⚡ Lighthouse Scores\n\n';
            body += '| Kategorie | Score |\n|-----------|-------|\n';
            for (const [k,v] of Object.entries(report.categories || {})) {
              body += `| ${k} | ${Math.round((v.score||0)*100)} |\n`;
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Create Lighthouse Check
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: LouisBrunner/checks-action@v1.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Lighthouse Report
          conclusion: neutral
          output: |
            {
              "title": "Lighthouse Scores",
              "summary": "Performance, Accessibility, Best Practices, SEO",
              "text": "$(node .github/scripts/format-lighthouse.js)"
            }

      - name: Upload Lighthouse reports
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: lh-reports
          path: ".lighthouseci/"
          if-no-files-found: ignore
          retention-days: 14

      - name: Stop local server
        if: always()
        run: |
          if [ -f server.pid ]; then kill "$(cat server.pid)" || true; fi

      - name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(ci): update generated assets [skip ci]"
          file_pattern: |
            overrides/**
            snippets/**
            docs/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

  npm-deps-update:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json', 'package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements.in') }}
          restore-keys: |
            v1-pip-${{ runner.os }}-

      - name: Install Python dependencies
        if: hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Commit and push dependency updates
        if: hashFiles('package-lock.json', 'package.json') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update npm dependencies"
          file_pattern: |
            package.json
            package-lock.json
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

  pip-deps-update:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json', 'package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements.in') }}
          restore-keys: |
            v1-pip-${{ runner.os }}-

      - name: Install Python dependencies
        if: hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Commit and push updated Python dependencies
        if: hashFiles('requirements.in') != '' || hashFiles('requirements.txt', 'requirements.in') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update Python dependencies"
          file_pattern: |
            requirements.txt
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

  quality-gate:
    needs: [build, npm-deps-update, pip-deps-update]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json', 'package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements.in') }}
          restore-keys: |
            v1-pip-${{ runner.os }}-

      - name: Install Python dependencies
        if: hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Aggregate job results
        continue-on-error: true
        run: |
          echo "Build result: ${{ needs.build.result }}"
          echo "NPM deps update result: ${{ needs.npm-deps-update.result }}"
          echo "PIP deps update result: ${{ needs.pip-deps-update.result }}"
          failed=false
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed"
            failed=true
          fi
          if [ "${{ needs.npm-deps-update.result }}" == "failure" ]; then
            echo "❌ npm-deps-update failed"
            failed=true
          fi
          if [ "${{ needs.pip-deps-update.result }}" == "failure" ]; then
            echo "❌ pip-deps-update failed"
            failed=true
          fi
          if [ "$failed" = true ]; then
            exit 1
          fi
          echo "✅ Quality Gate passed"

      - name: Dependency review
        continue-on-error: true
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

      - name: Run commitlint on PR commits
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: npx commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose

  release:
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure Git defaultBranch
        run: |
          git config --global init.defaultBranch main

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup GPG signing
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v5
        with:
          node-version: "lts/*"
          cache: npm
          check-latest: true
          cache-dependency-path: package.json

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json', 'package.json') != ''
        run: |
          npm cache clean --force
          npm install -g npm-check-updates
          ncu -u
          npm install --ignore-scripts --no-audit --no-fund --quiet

      - name: Setup Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: pip
          check-latest: true
          cache-dependency-path: requirements.txt

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements.in') }}
          restore-keys: |
            v1-pip-${{ runner.os }}-

      - name: Install Python dependencies
        if: hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --quiet --upgrade pip pip-tools
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
