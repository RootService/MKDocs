name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  name: mkdocs
  TAG_PREFIX: RootService/MKDocs
  LOG_TAIL_LINES: 500
  CHROME_PATH: /usr/bin/google-chrome
  LIGHTHOUSE_THRESHOLD: '90'
  SECURITY_THRESHOLD: '0'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      mkdocs_status: ${{ steps.mkdocs_summary.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          check-latest: true
          cache: 'pip'

      - name: Install MkDocs deps (if present)
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build site
        id: mkdocs_build
        run: |
          set -euo pipefail
          if [ -f mkdocs.yml ]; then
            mkdocs build 2>&1 | tee build.log
          else
            echo "mkdocs.yml missing"; exit 1
          fi

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 5
          include-hidden-files: true

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          if-no-files-found: warn
          retention-days: 5
          include-hidden-files: true

      - name: Extract last log lines
        if: failure() && hashFiles('build.log') != ''
        id: log_tail
        run: |
          tail -n "$LOG_TAIL_LINES" build.log > log_tail.txt
          {
            echo 'log<<EOF'
            cat log_tail.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: MkDocs summary
        id: mkdocs_summary
        if: always()
        run: |
          if [ -f site/index.html ]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment MkDocs result on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          result-encoding: string
          retries: 3
          script: |
            const status = `${{ steps.mkdocs_summary.outputs.status }}`;
            const runId = `${{ github.run_id }}`;
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            let body = `📖 MkDocs Build status: **${status}**\n\n📦 [Artifacts](${artifactUrl})`;
            if (status === "failure" && `${{ steps.log_tail.outputs.log }}`) {
              body += `\n\n🚨 Build Log (last ${{ env.LOG_TAIL_LINES }} lines):\n\n\`\`\`\n${{ steps.log_tail.outputs.log }}\n\`\`\``;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

  lighthouse:
    needs: build
    continue-on-error: true
    # läuft auf PRs und auf main-Pushes
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    outputs:
      performance: ${{ steps.scores.outputs.performance }}
      accessibility: ${{ steps.scores.outputs.accessibility }}
      bestPractices: ${{ steps.scores.outputs.bestPractices }}
      seo: ${{ steps.scores.outputs.seo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          check-latest: true
          cache: 'npm'

      - name: Install MkDocs deps (if present)
        if: ${{ hashFiles('package-lock.json', 'pnpm-lock.yaml', 'yarn.lock') != '' || hashFiles('package.json') != '' }}
        run: |
          npm install --no-audit --no-fund

      - name: Download site artifact
        uses: actions/download-artifact@v5
        with:
          name: site
          path: site

      - name: Ensure LHCI config files
        run: |
          test -f .lighthouserc.json || { echo "Missing .lighthouserc.json"; exit 1; }
          test -f .desktopConfig.json || { echo "Missing .desktopConfig.json"; exit 1; }

      - name: Serve site
        run: |
          test -d site || { echo "Missing site/; build step failed"; exit 1; }
          npx --yes serve ./site --listen tcp://0.0.0.0:8000 --single --no-clipboard > server.log 2>&1 &
          ok=0
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8000 >/dev/null; then ok=1; break; fi
            sleep 1
          done
          if [ "$ok" -ne 1 ]; then
            echo "server not ready after 30s"; tail -n 200 server.log || true; exit 1
          fi

      - name: Run Lighthouse CI
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: github-actions
        run: |
          npx --yes @lhci/cli@latest collect --config=.lighthouserc.json --output-dir=.lighthouseci
          npx --yes @lhci/cli@latest assert  --config=.lighthouserc.json --output-dir=.lighthouseci

      - name: Validate LHCI output (must NOT be empty)
        run: |
          if [ -z "$(ls -A .lighthouseci 2>/dev/null)" ]; then
            echo "No LHCI output generated"; exit 1
          fi

      - name: Extract Scores
        id: scores
        if: ${{ hashFiles('.lighthouseci/manifest.json') != '' }}
        run: |
          extract_score() {
            key=$1
            score=$(jq -r ".[0].summary.${key}" .lighthouseci/manifest.json)
            percent=$(awk "BEGIN {printf \"%.0f\", $score * 100}")
            echo "${key}=$percent" >> "$GITHUB_OUTPUT"
          }
          extract_score performance
          extract_score accessibility
          extract_score bestPractices
          extract_score seo

      - name: Upload Lighthouse report
        if: ${{ hashFiles('.lighthouseci/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/
          if-no-files-found: error
          retention-days: 5
          include-hidden-files: true

      - name: Comment Lighthouse result on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          result-encoding: string
          retries: 3
          script: |
            const runId = context.runId;
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🔎 Lighthouse CI completed\n\n📦 [Artifacts](${artifactUrl})`
            });

  security:
    needs: build
    continue-on-error: true
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

      - name: Comment result on PR
        uses: actions/github-script@v8
        with:
          result-encoding: string
          retries: 3
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "🛡️ Security check completed: dependency review run."
            });

  summary:
    needs: [build, lighthouse]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate CI Summary
        run: |
          echo "## CI Pipeline Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- MkDocs: ${{ needs.build.outputs.mkdocs_status }}" >> "$GITHUB_STEP_SUMMARY"
          if [ -n "${{ needs.lighthouse.outputs.performance }}" ]; then
            echo "### Lighthouse Scores" >> "$GITHUB_STEP_SUMMARY"
            echo "- Performance: ${{ needs.lighthouse.outputs.performance }}" >> "$GITHUB_STEP_SUMMARY"
            echo "- Accessibility: ${{ needs.lighthouse.outputs.accessibility }}" >> "$GITHUB_STEP_SUMMARY"
            echo "- Best Practices: ${{ needs.lighthouse.outputs.bestPractices }}" >> "$GITHUB_STEP_SUMMARY"
            echo "- SEO: ${{ needs.lighthouse.outputs.seo }}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "### Lighthouse Scores" >> "$GITHUB_STEP_SUMMARY"
            echo "No Lighthouse results found." >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "### Artifacts" >> "$GITHUB_STEP_SUMMARY"
          echo "- https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Comment CI Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          result-encoding: string
          retries: 3
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const mk = `${{ needs.build.outputs.mkdocs_status }}`;
            const perf = `${{ needs.lighthouse.outputs.performance }}`;
            const a11y = `${{ needs.lighthouse.outputs.accessibility }}`;
            const bp = `${{ needs.lighthouse.outputs.bestPractices }}`;
            const seo = `${{ needs.lighthouse.outputs.seo }}`;
            const lines = [
              "## CI Pipeline Summary",
              `- MkDocs: **${mk || 'n/a'}**`,
              "### Lighthouse",
              `- Performance: **${perf || 'n/a'}**`,
              `- Accessibility: **${a11y || 'n/a'}**`,
              `- Best Practices: **${bp || 'n/a'}**`,
              `- SEO: **${seo || 'n/a'}**`,
              "",
              `### Artifacts`,
              `- ${runUrl}`
            ];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: lines.join("\n")
            });
