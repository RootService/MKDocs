name: Continuous Integration (CI)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
      # Monatlich für Langzeittests
    - cron: "0 3 1 * *"
      # Wöchentlich für Dependency-Checks
    - cron: "0 4 * * 0"
  workflow_dispatch:

permissions:
  contents: write          # für gh-deploy und semantic-release
  pages: write
  pull-requests: write

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: ${{ !(github.ref_name == 'main' || github.event_name == 'pull_request') }}

env:
  CI: true
  NODE_ENV: production
  FORCE_COLOR: "1"
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  TAG_PREFIX: RootService/MKDocs
  # Falls gesetzt: werden in "GPG: Import" verwendet
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MKDOCS_GIT_COMMITTERS_APIKEY: ${{ secrets.GITHUB_TOKEN }}
  LH_THRESHOLD_PERF: 80
  LH_THRESHOLD_A11Y: 80
  LH_THRESHOLD_BP: 80
  LH_THRESHOLD_SEO: 80

jobs:
  ci:
    name: Build, Lint, Lighthouse, Release
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      # --- Git vorbereiten, dann Checkout ---
      - name: Git Configure
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global init.defaultBranch main

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure Git identity
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      # --- GPG optional (Signieren) ---
      - name: GPG: Import
        if: env.GPG_PRIVATE_KEY != ''
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          if [ -n "$GPG_PASSPHRASE" ]; then
            echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          fi
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5; exit}')
          git config --global user.signingkey "$KEYID"
          git config --global commit.gpgsign true
          git config --global gpg.program gpg
          git commit --allow-empty -m "GPG signing check" || true

      # --- Toolchains ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          check-latest: true
          cache-dependency-path: package.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          check-latest: true
          cache-dependency-path: requirements.txt

      # --- Caches ---
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            **/node_modules
          key: v1-npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json','**/pnpm-lock.yaml','**/yarn.lock') }}
          restore-keys: |
            v1-npm-${{ runner.os }}-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pip-tools
          key: v1-pip-${{ runner.os }}-${{ hashFiles('requirements*.txt','requirements*.in') }}
          restore-keys: |
            v1-pip-${{ runner.os }}-

      # --- Installationen ---
      - name: Install Node dependencies
        if: hashFiles('package.json') != '' || hashFiles('package-lock.json', 'package.json', 'pnpm-lock.yaml', 'yarn.lock') != ''
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack enable && corepack prepare pnpm@latest --activate
            pnpm i --frozen-lockfile
          elif [ -f yarn.lock ]; then
            corepack enable && corepack prepare yarn@stable --activate
            yarn install --frozen-lockfile
          else
            npm cache clean --force
            npm install -g npm-check-updates
            ncu -u
            npm install --ignore-scripts --no-audit --no-fund --quiet
          fi

      - name: Commit and push dependency updates
        if: hashFiles('package.json') != '' || hashFiles('package-lock.json', 'package.json', 'pnpm-lock.yaml', 'yarn.lock') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update npm dependencies"
          file_pattern: |
            package.json
            package-lock.json
            pnpm-lock.yaml
            yarn.lock
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      - name: Install Python dependencies
        if: hashFiles('requirements.in') != '' || hashFiles('requirements.txt', 'requirements.in') != ''
        run: |
          python -m pip install --upgrade pip pip-tools >/dev/null
          if [ -f requirements.in ]; then pip-compile requirements.in --quiet --no-header --no-annotate --upgrade; fi
          if [ -f requirements.txt ]; then pip install --quiet --use-pep517 --upgrade -r requirements.txt; fi
          # MkDocs Material + Plugins, falls nicht im requirements.txt
          python - <<'PY'
          import os, subprocess, sys
          req = os.path.exists('requirements.txt')
          pkgs = ["mkdocs","mkdocs-material[imaging]","mkdocs-material-extensions","mkdocs-minify-plugin","mkdocs-git-revision-date-localized-plugin","mkdocs-git-committers-plugin-2","mkdocs-git-authors-plugin","mkdocs-redirects","mkdocs-htmlproofer-plugin","mkdocs-static-i18n","beautifulsoup4","cairosvg","cairocffi","cffi","tinycss2","cssselect2","pillow","pip-audit","bandit"]
          if not req:
              subprocess.check_call([sys.executable,"-m","pip","install","--quiet",*pkgs])
          PY

      - name: Commit and push updated Python dependencies
        if: hashFiles('requirements.in') != '' || hashFiles('requirements.txt', 'requirements.in') != ''
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(deps): update Python dependencies"
          file_pattern: |
            requirements.in
            requirements.txt
          branch: main
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      # --- Linting (nicht build-blockierend) ---
      - name: Run Linters
        continue-on-error: true
        run: |
          if [ -d snippets/ports ]; then
            sed -E -e '/^#[[:space:]]/d' -i snippets/ports/*/options
            sed -E -e 's/[[:space:]]*$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/,[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
            sed -E -e '/^_OPTIONS_READ/ s/_[[:digit:]]+[[:space:]]?$//g' -i snippets/ports/*/options
          else
            echo "No snippets/ports directory. Skipping."
          fi
          npx --yes prettier --check {site,docs,overrides}/**/*.{js,ts,css,md,json,yml} || true
          npx --yes markdownlint-cli2 {site,docs,overrides}/**/*.md || true
          npx --yes eslint {site,docs,overrides}/**/*.{js,ts,md} || true
          npx --yes stylelint {site,docs,overrides}/**/*.css || true
          npx --yes htmlhint {site,docs,overrides}/**/*.html || true

      - name: Auto-commit overrides/fixes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "chore(ci): update generated assets [skip ci]"
          file_pattern: |
            overrides/**
            snippets/**
            docs/**
          branch: ${{ github.ref_name }}
          skip_dirty_check: false
          add_options: -A
          push_options: --force-with-lease
          tagging_message: ${{ env.TAG_PREFIX }}-${{ github.run_number }}
          create_branch: false

      # --- MkDocs Build + Artefakt ---
      - name: Build MkDocs site
        run: |
          mkdocs build --clean

      - name: Upload built site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Download built site artifact
        uses: actions/download-artifact@v5
        with:
          name: site
          path: site

      # --- Pages Deploy (nur main) ---
      - name: Deploy MkDocs to GitHub Pages
        if: github.ref_name == 'main'
        run: |
          mkdocs gh-deploy --force

      # --- CSP/Headers optional (nur wenn Skript vorhanden) ---
      - name: Generate CSP headers
        if: hashFiles('.github/scripts/gen-csp.js') != ''
        run: |
          node .github/scripts/gen-csp.js

      # --- Lighthouse: lokalen Server starten ---
      - name: Start local HTTP server
        run: |
          npx http-server ./site -p 8000 --silent &
          echo $! > server.pid
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000 >/dev/null; then
              echo "✅ Server ist erreichbar."
              break
            fi
            echo "⏳ Warte auf Server (Versuch $i)..."
            sleep 1
          done
          if ! curl -sSf http://127.0.0.1:8000 >/dev/null; then
            echo "❌ Server konnte nicht gestartet werden."
            exit 1
          fi

      # --- Lighthouse CI autorun mit stabilen Chrome-Flags ---
      - name: Lighthouse CI (autorun)
        run: |
          npx lhci autorun --config ".lighthouserc.json" --failOnUploadFailure --timeout=240000 --quiet || true

      # Fallback mit xvfb, falls autorun fehlschlägt
      - name: Lighthouse CI (autorun via xvfb)
        if: ${{ failure() }}
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb
          xvfb-run -a npx lhci autorun --config ".lighthouserc.json" --failOnUploadFailure --timeout=240000 --quiet || true

      # Zusammenfassung im Job-Summary
      - name: Lighthouse Scores ins Summary
        run: |
          node .github/scripts/format-lighthouse.js >> $GITHUB_STEP_SUMMARY || true

      - name: Comment Lighthouse scores on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const reportFiles = fs.readdirSync('.lighthouseci').filter(f => f.endsWith('-lhr.json'));
            if (reportFiles.length === 0) {
              core.warning('No Lighthouse report found');
              return;
            }
            const reportPath = reportFiles.map(f => path.join('.lighthouseci', f))
              .sort((a,b) => fs.statSync(b).mtimeMs - fs.statSync(a).mtimeMs)[0];
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            let body = '### ⚡ Lighthouse Scores\n\n';
            body += '| Kategorie | Score |\n|-----------|-------|\n';
            for (const [k,v] of Object.entries(report.categories || {})) {
              body += `| ${k} | ${Math.round((v.score||0)*100)} |\n`;
            }
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Create Lighthouse Check
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: LouisBrunner/checks-action@v1.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Lighthouse Report
          conclusion: neutral
          output: |
            {
              "title": "Lighthouse Scores",
              "summary": "Performance, Accessibility, Best Practices, SEO",
              "text": "$(node .github/scripts/format-lighthouse.js)"
            }

      - name: Upload Lighthouse reports
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: lh-reports
          path: ".lighthouseci/"
          if-no-files-found: ignore
          retention-days: 14

      # --- lokalen Server stoppen ---
      - name: Stop local HTTP server
        if: always()
        run: |
          if [ -f server.pid ]; then kill "$(cat server.pid)" || true; fi

      # --- Release nur auf main ---
      - name: Run semantic-release
        if: github.ref_name == 'main'
        run: |
          npx semantic-release

      - name: Dependency review
        continue-on-error: true
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

      - name: Run commitlint on PR commits
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          npx commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.sha }} --verbose
