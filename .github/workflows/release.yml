name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  release-build:
    runs-on: ubuntu-latest
    outputs:
      perf_score: ${{ steps.scores.outputs.perf }}
      a11y_score: ${{ steps.scores.outputs.a11y }}
      bp_score:   ${{ steps.scores.outputs.bp }}
      seo_score:  ${{ steps.scores.outputs.seo }}
    steps:
      - uses: actions/checkout@v4

      - id: get_version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Try CI artifact (exact commit)
        id: artifact_exact
        uses: actions/download-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site
        continue-on-error: true

      - name: Try CI artifact (latest)
        if: steps.artifact_exact.outcome == 'failure'
        id: artifact_latest
        uses: actions/download-artifact@v4
        with:
          name: site-latest
          path: site
        continue-on-error: true

      - name: Try Lighthouse artifact (exact commit)
        id: lhci_exact
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-${{ github.sha }}
          path: .lighthouse
        continue-on-error: true

      - name: Try Lighthouse artifact (latest)
        if: steps.lhci_exact.outcome == 'failure'
        id: lhci_latest
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-latest
          path: .lighthouse
        continue-on-error: true

      - name: Try Screenshot artifact (exact commit)
        id: shots_exact
        uses: actions/download-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: .screenshots
        continue-on-error: true

      - name: Try Screenshot artifact (latest)
        if: steps.shots_exact.outcome == 'failure'
        id: shots_latest
        uses: actions/download-artifact@v4
        with:
          name: screenshots-latest
          path: .screenshots
        continue-on-error: true

      - name: Set up Python (if rebuild required)
        if: steps.artifact_exact.outcome == 'failure' && steps.artifact_latest.outcome == 'failure'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore pip cache
        if: steps.artifact_exact.outcome == 'failure' && steps.artifact_latest.outcome == 'failure'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: pip-${{ runner.os }}-
          retention-days: 3

      - name: Install dependencies
        if: steps.artifact_exact.outcome == 'failure' && steps.artifact_latest.outcome == 'failure'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rebuild site
        if: steps.artifact_exact.outcome == 'failure' && steps.artifact_latest.outcome == 'failure'
        run: mkdocs build

      - uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: site

      - name: Extract Lighthouse Scores
        id: scores
        if: steps.lhci_exact.outcome == 'success' || steps.lhci_latest.outcome == 'success'
        run: |
          LHR=$(ls -1t .lighthouse/*.report.json | head -n1)
          PERF=$(jq -r '.categories.performance.score * 100' "$LHR")
          A11Y=$(jq -r '.categories.accessibility.score * 100' "$LHR")
          BP=$(jq -r '.categories["best-practices"].score * 100' "$LHR")
          SEO=$(jq -r '.categories.seo.score * 100' "$LHR")
          echo "perf=${PERF}" >> $GITHUB_OUTPUT
          echo "a11y=${A11Y}" >> $GITHUB_OUTPUT
          echo "bp=${BP}" >> $GITHUB_OUTPUT
          echo "seo=${SEO}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        run: |
          mkdir -p release_notes
          {
            echo "## Release v${{ steps.get_version.outputs.version }}"
            echo ""
            if [ -n "${{ steps.scores.outputs.perf }}" ]; then
              echo "### Lighthouse Scores"
              echo "- Performance: ${{ steps.scores.outputs.perf }}"
              echo "- Accessibility: ${{ steps.scores.outputs.a11y }}"
              echo "- Best Practices: ${{ steps.scores.outputs.bp }}"
              echo "- SEO: ${{ steps.scores.outputs.seo }}"
              echo ""
            fi
            if [ -d ".screenshots" ]; then
              echo "### Screenshots"
              for img in .screenshots/*; do
                fname=$(basename "$img")
                echo "![${fname}](./.screenshots/${fname})"
              done
            fi
          } > release_notes/summary.md

      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes/summary.md

  github-release:
    runs-on: ubuntu-latest
    needs: release-build
    steps:
      - uses: actions/checkout@v4

      - id: get_version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - run: tools/update-badges.sh --commit
      - run: git push origin HEAD:main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: |
            Release v${{ steps.get_version.outputs.version }}
            [Perf:${{ needs.release-build.outputs.perf_score }}]
            [A11Y:${{ needs.release-build.outputs.a11y_score }}]
            [BP:${{ needs.release-build.outputs.bp_score }}]
            [SEO:${{ needs.release-build.outputs.seo_score }}]
          draft: false
          prerelease: false
          files: |
            site/**
            .lighthouse/**
            .screenshots/**
          body_path: summary.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
